@page "/types"

<h3>Types</h3>

<p>
    Learn about the resistances and weaknesses of any Pokemon type or type combination. Just enter
    one or two types below.
</p>

<p>
    <!-- TODO: Get rid of the dropdown arrow in the input boxes. -->
    <input type="search" list="types" placeholder="Type 1" @onchange="OnChange1" onfocus="this.value=''" />
    <input type="search" list="types" placeholder="Type 2" @onchange="OnChange2" onfocus="this.value=''" />

    <datalist id="types">
        @{
            Array tokens = Enum.GetValues(typeof(TypeToken));
            var names = new List<string>(tokens.Length);
            foreach (TypeToken t in tokens)
            {
                names.Add(t.ToString());
            }
            names.Sort();
            foreach (string n in names)
            {
                <option value="@n" />
            }
        }
    </datalist>
</p>

@if (typeInfo != null)
{
    <!-- TODO: Change the below to use icons instead of text. -->
    <h4><b>@typeInfo.Name Type</b></h4>
    <h5><b>Resistances</b></h5>
    <div class="flex-grid">
        <div class="col">
            <h6>Resist 2x</h6>
            <ul class="ul-nostyle">
                @foreach (var t in typeInfo.Resist2x)
                {
                    <li>@t.ToString()</li>
                }
            </ul>
        </div>
        <div class="col">
            <h6>Resist 4x</h6>
            <ul class="ul-nostyle">
                @foreach (var t in typeInfo.Resist4x)
                {
                    <li>@t.ToString()</li>
                }
            </ul>
        </div>
        <div class="col">
            <h6>Immune (0x)</h6>
            <ul class="ul-nostyle">
                @foreach (var t in typeInfo.Immune)
                {
                    <li>@t.ToString()</li>
                }
            </ul>
        </div>
    </div>
    <h5><b>Weaknesses</b></h5>
    <div class="flex-grid">
        <div class="col">
            <h6>Weak To 2x</h6>
            <ul class="ul-nostyle">
                @foreach (var t in typeInfo.WeakTo2x)
                {
                    <li>@t.ToString()</li>
                }
            </ul>
        </div>
        <div class="col">
            <h6>Weak To 4x</h6>
            <ul class="ul-nostyle">
                @foreach (var t in typeInfo.WeakTo4x)
                {
                    <li>@t.ToString()</li>
                }
            </ul>
        </div>
        <div class="col">
        </div>
    </div>
    <h5><b>Normal Damage (1x)</b></h5>
    <ul class="ul-nostyle">
        @foreach (var t in typeInfo.Normal)
        {
            <li>@t.ToString()</li>
        }
    </ul>
}

@code {
    private string type1;
    private string type2;
    private LocPokemonType typeInfo;

    private void OnChange1(ChangeEventArgs args)
    {
        type1 = (string)args.Value;
        typeInfo = GetPokemonType();
    }

    private void OnChange2(ChangeEventArgs args)
    {
        type2 = (string)args.Value;
        typeInfo = GetPokemonType();
    }

    private LocPokemonType GetPokemonType()
    {
        var types = new List<TypeToken>(2);
        bool succeeded = true;
        succeeded &= TryConvertInput(type1, ref types);
        succeeded &= TryConvertInput(type2, ref types);
        if (!succeeded || types.Count == 0)
        {
            return null;
        }
        return API.MakeType(types.ToArray());
    }

    private bool TryConvertInput(string input, ref List<TypeToken> types)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return true;
        }
        input = input.Trim();
        TypeToken t;
        if (!API.TryConvertStringToType(input, out t))
        {
            return false;
        }
        types.Add(t);
        return true;
    }
}

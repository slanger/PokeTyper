@page "/mons"

<h3>Pokemon</h3>

<p>
    Learn about the resistances and weaknesses of any Pokemon. Just enter the Pokemon below. Additionally, select your own team and moves below to see which are best suited to counter that pokemon.
    Currently, only the Pokemon from the Let's Go Pikachu and Let's Go Eevee games (the original
    151 plus some Alolan forms) are supported.
</p>

<p>
    <!-- TODO: Get rid of the dropdown arrow in the input boxes. -->
    <input type="search" list="mons" placeholder="Which Pokemon?" @onchange="OnChange" onfocus="this.value=''" />

    <datalist id="mons">
        @{
            var mons = new List<string>(pokedex.Keys);
            mons.Sort();
            foreach (string n in mons)
            {
                <option value="@n" />
            }
        }
    </datalist>
</p>

@if (typeInfo != null)
{
    <!-- TODO: Change the below to use icons instead of text. -->
    <h4><b>@typeInfo.Name Type</b></h4>
    <h5><b>Resistances</b></h5>
    <div class="flex-grid">
        <div class="col">
            <h6>Resist 2x</h6>
            <ul class="ul-nostyle">
                @foreach (var t in typeInfo.Resist2x)
                {
                    <li>@t.ToString()</li>
                }
            </ul>
        </div>
        <div class="col">
            <h6>Resist 4x</h6>
            <ul class="ul-nostyle">
                @foreach (var t in typeInfo.Resist4x)
                {
                    <li>@t.ToString()</li>
                }
            </ul>
        </div>
        <div class="col">
            <h6>Immune (0x)</h6>
            <ul class="ul-nostyle">
                @foreach (var t in typeInfo.Immune)
                {
                    <li>@t.ToString()</li>
                }
            </ul>
        </div>
    </div>
    <h5><b>Weaknesses</b></h5>
    <div class="flex-grid">
        <div class="col">
            <h6>Weak To 2x</h6>
            <ul class="ul-nostyle">
                @foreach (var t in typeInfo.WeakTo2x)
                {
                    <li>@t.ToString()</li>
                }
            </ul>
        </div>
        <div class="col">
            <h6>Weak To 4x</h6>
            <ul class="ul-nostyle">
                @foreach (var t in typeInfo.WeakTo4x)
                {
                    <li>@t.ToString()</li>
                }
            </ul>
        </div>
        <div class="col">
        </div>
    </div>
    <h5><b>Normal Damage (1x)</b></h5>
    <ul class="ul-nostyle">
        @foreach (var t in typeInfo.Normal)
        {
            <li>@t.ToString()</li>
        }
    </ul>
    
    <h5><b>Best Counter in Your Party</b></h5>
    <h3>@bestCounterMon()</h3>
    
    
}

<br><br>
<h3>Enter Your Squad</h3>

<p>
    Enter your 6 pokemon to see how they best counter the pokemon selected above.
</p>
<p>
    <table style="width:100%">
      <tr>
        <th>Pokemon</th>
        <th>Move 1</th>
        <th>Move 2</th>
        <th>Move 3</th>
        <th>Move 4</th>
      </tr>
      <tr>
        <td><input type="search" list="mons" placeholder="Pokemon 1" @onchange="OnChange1" onfocus="this.value=''" /></td>
        <td>Move 1</td>
        <td>Move 2</td>
        <td>Move 3</td>
        <td>Move 4</td>
      </tr>
      <tr>
        <td><input type="search" list="mons" placeholder="Pokemon 2" @onchange="OnChange2" onfocus="this.value=''" /></td>
        <td>Move 1</td>
        <td>Move 2</td>
        <td>Move 3</td>
        <td>Move 4</td>
      </tr>
      <tr>
        <td><input type="search" list="mons" placeholder="Pokemon 3" @onchange="OnChange3" onfocus="this.value=''" /></td>
        <td>Move 1</td>
        <td>Move 2</td>
        <td>Move 3</td>
        <td>Move 4</td>
      </tr>
      <tr>
        <td><input type="search" list="mons" placeholder="Pokemon 4" @onchange="OnChange4" onfocus="this.value=''" /></td>
        <td>Move 1</td>
        <td>Move 2</td>
        <td>Move 3</td>
        <td>Move 4</td>
      </tr>
      <tr>
        <td><input type="search" list="mons" placeholder="Pokemon 5" @onchange="OnChange5" onfocus="this.value=''" /></td>
        <td>Move 1</td>
        <td>Move 2</td>
        <td>Move 3</td>
        <td>Move 4</td>
      </tr>
      <tr>
        <td><input type="search" list="mons" placeholder="Pokemon 6" @onchange="OnChange6" onfocus="this.value=''" /></td>
        <td>Move 1</td>
        <td>Move 2</td>
        <td>Move 3</td>
        <td>Move 4</td>
      </tr>
    </table>    
</p>
@if (squad != null)
{
    <!-- TODO: Change the below to use icons instead of text. -->
    <h5><b>Your Party</b></h5>
    <ul class="ul-nostyle">
        @foreach (var p in squad)
        {
            <li>@p.Name.ToString()</li>
        }
    </ul> 
}
@code {
    private LocPokemonType typeInfo;
    PokeApiClient pokeClient = new PokeApiClient();
    public class sPMon
    {
      public string Name { get; set; }
      public int Score { get; set; }
      public TypeToken[] Types { get; set; }
      public sPMon(string name, TypeToken[] types, int score)
      {
          Name = name;
          Types = types;
          Score = score;
      }
    }
    sPMon[] squad = new sPMon[6]{new sPMon("Abra",new TypeToken[]{TypeToken.Psychic},0), new sPMon("Abra",new TypeToken[]{TypeToken.Psychic},0),new sPMon("Abra",new TypeToken[]{TypeToken.Psychic},0),new sPMon("Abra",new TypeToken[]{TypeToken.Psychic},0),new sPMon("Abra",new TypeToken[]{TypeToken.Psychic},0),new sPMon("Abra",new TypeToken[]{TypeToken.Psychic},0)};
    private Dictionary<string, TypeToken[]> pokedex = new Dictionary<string, TypeToken[]>()
    {
        {"Bulbasaur", new TypeToken[]{TypeToken.Grass, TypeToken.Poison}},
        {"Ivysaur", new TypeToken[]{TypeToken.Grass, TypeToken.Poison}},
        {"Venusaur", new TypeToken[]{TypeToken.Grass, TypeToken.Poison}},
        {"Venusaur - Mega", new TypeToken[]{TypeToken.Grass, TypeToken.Poison}},
        {"Charmander", new TypeToken[]{TypeToken.Fire}},
        {"Charmeleon", new TypeToken[]{TypeToken.Fire}},
        {"Charizard", new TypeToken[]{TypeToken.Fire, TypeToken.Flying}},
        {"Charizard - Mega X", new TypeToken[]{TypeToken.Fire, TypeToken.Dragon}},
        {"Charizard - Mega Y", new TypeToken[]{TypeToken.Fire, TypeToken.Flying}},
        {"Squirtle", new TypeToken[]{TypeToken.Water}},
        {"Wartortle", new TypeToken[]{TypeToken.Water}},
        {"Blastoise", new TypeToken[]{TypeToken.Water}},
        {"Blastoise - Mega", new TypeToken[]{TypeToken.Water}},
        {"Caterpie", new TypeToken[]{TypeToken.Bug}},
        {"Metapod", new TypeToken[]{TypeToken.Bug}},
        {"Butterfree", new TypeToken[]{TypeToken.Bug, TypeToken.Flying}},
        {"Weedle", new TypeToken[]{TypeToken.Bug, TypeToken.Poison}},
        {"Kakuna", new TypeToken[]{TypeToken.Bug, TypeToken.Poison}},
        {"Beedrill", new TypeToken[]{TypeToken.Bug, TypeToken.Poison}},
        {"Beedrill - Mega", new TypeToken[]{TypeToken.Bug, TypeToken.Poison}},
        {"Pidgey", new TypeToken[]{TypeToken.Normal, TypeToken.Flying}},
        {"Pidgeotto", new TypeToken[]{TypeToken.Normal, TypeToken.Flying}},
        {"Pidgeot", new TypeToken[]{TypeToken.Normal, TypeToken.Flying}},
        {"Pidgeot - Mega", new TypeToken[]{TypeToken.Normal, TypeToken.Flying}},
        {"Rattata", new TypeToken[]{TypeToken.Normal}},
        {"Rattata - Alolan", new TypeToken[]{TypeToken.Normal, TypeToken.Dark}},
        {"Raticate", new TypeToken[]{TypeToken.Normal}},
        {"Raticate - Alolan", new TypeToken[]{TypeToken.Normal, TypeToken.Dark}},
        {"Spearow", new TypeToken[]{TypeToken.Normal, TypeToken.Flying}},
        {"Fearow", new TypeToken[]{TypeToken.Normal, TypeToken.Flying}},
        {"Ekans", new TypeToken[]{TypeToken.Poison}},
        {"Arbok", new TypeToken[]{TypeToken.Poison}},
        {"Pikachu", new TypeToken[]{TypeToken.Electric}},
        {"Raichu", new TypeToken[]{TypeToken.Electric}},
        {"Raichu - Alolan", new TypeToken[]{TypeToken.Electric, TypeToken.Psychic}},
        {"Sandshrew", new TypeToken[]{TypeToken.Ground}},
        {"Sandshrew - Alolan", new TypeToken[]{TypeToken.Ice, TypeToken.Steel}},
        {"Sandslash", new TypeToken[]{TypeToken.Ground}},
        {"Sandslash - Alolan", new TypeToken[]{TypeToken.Ice, TypeToken.Steel}},
        {"Nidoran - Female", new TypeToken[]{TypeToken.Poison}},
        {"Nidorina", new TypeToken[]{TypeToken.Poison}},
        {"Nidoqueen", new TypeToken[]{TypeToken.Poison, TypeToken.Ground}},
        {"Nidoran - Male", new TypeToken[]{TypeToken.Poison}},
        {"Nidorino", new TypeToken[]{TypeToken.Poison}},
        {"Nidoking", new TypeToken[]{TypeToken.Poison, TypeToken.Ground}},
        {"Clefairy", new TypeToken[]{TypeToken.Fairy}},
        {"Clefable", new TypeToken[]{TypeToken.Fairy}},
        {"Vulpix", new TypeToken[]{TypeToken.Fire}},
        {"Vulpix - Alolan", new TypeToken[]{TypeToken.Ice}},
        {"Ninetales", new TypeToken[]{TypeToken.Fire}},
        {"Ninetales - Alolan", new TypeToken[]{TypeToken.Ice, TypeToken.Fairy}},
        {"Jigglypuff", new TypeToken[]{TypeToken.Normal, TypeToken.Fairy}},
        {"Wigglytuff", new TypeToken[]{TypeToken.Normal, TypeToken.Fairy}},
        {"Zubat", new TypeToken[]{TypeToken.Poison, TypeToken.Flying}},
        {"Golbat", new TypeToken[]{TypeToken.Poison, TypeToken.Flying}},
        {"Oddish", new TypeToken[]{TypeToken.Grass, TypeToken.Poison}},
        {"Gloom", new TypeToken[]{TypeToken.Grass, TypeToken.Poison}},
        {"Vileplume", new TypeToken[]{TypeToken.Grass, TypeToken.Poison}},
        {"Paras", new TypeToken[]{TypeToken.Bug, TypeToken.Grass}},
        {"Parasect", new TypeToken[]{TypeToken.Bug, TypeToken.Grass}},
        {"Venonat", new TypeToken[]{TypeToken.Bug, TypeToken.Poison}},
        {"Venomoth", new TypeToken[]{TypeToken.Bug, TypeToken.Poison}},
        {"Diglett", new TypeToken[]{TypeToken.Ground}},
        {"Diglett - Alolan", new TypeToken[]{TypeToken.Ground, TypeToken.Steel}},
        {"Dugtrio", new TypeToken[]{TypeToken.Ground}},
        {"Dugtrio - Alolan", new TypeToken[]{TypeToken.Ground, TypeToken.Steel}},
        {"Meowth", new TypeToken[]{TypeToken.Normal}},
        {"Meowth - Alolan", new TypeToken[]{TypeToken.Dark}},
        {"Persian", new TypeToken[]{TypeToken.Normal}},
        {"Persian - Alolan", new TypeToken[]{TypeToken.Dark}},
        {"Psyduck", new TypeToken[]{TypeToken.Water}},
        {"Golduck", new TypeToken[]{TypeToken.Water}},
        {"Mankey", new TypeToken[]{TypeToken.Fighting}},
        {"Primeape", new TypeToken[]{TypeToken.Fighting}},
        {"Growlithe", new TypeToken[]{TypeToken.Fire}},
        {"Arcanine", new TypeToken[]{TypeToken.Fire}},
        {"Poliwag", new TypeToken[]{TypeToken.Water}},
        {"Poliwhirl", new TypeToken[]{TypeToken.Water}},
        {"Poliwrath", new TypeToken[]{TypeToken.Water, TypeToken.Fighting}},
        {"Abra", new TypeToken[]{TypeToken.Psychic}},
        {"Kadabra", new TypeToken[]{TypeToken.Psychic}},
        {"Alakazam", new TypeToken[]{TypeToken.Psychic}},
        {"Alakazam - Mega", new TypeToken[]{TypeToken.Psychic}},
        {"Machop", new TypeToken[]{TypeToken.Fighting}},
        {"Machoke", new TypeToken[]{TypeToken.Fighting}},
        {"Machamp", new TypeToken[]{TypeToken.Fighting}},
        {"Bellsprout", new TypeToken[]{TypeToken.Grass, TypeToken.Poison}},
        {"Weepinbell", new TypeToken[]{TypeToken.Grass, TypeToken.Poison}},
        {"Victreebel", new TypeToken[]{TypeToken.Grass, TypeToken.Poison}},
        {"Tentacool", new TypeToken[]{TypeToken.Water, TypeToken.Poison}},
        {"Tentacruel", new TypeToken[]{TypeToken.Water, TypeToken.Poison}},
        {"Geodude", new TypeToken[]{TypeToken.Rock, TypeToken.Ground}},
        {"Geodude - Alolan", new TypeToken[]{TypeToken.Rock, TypeToken.Electric}},
        {"Graveler", new TypeToken[]{TypeToken.Rock, TypeToken.Ground}},
        {"Graveler - Alolan", new TypeToken[]{TypeToken.Rock, TypeToken.Electric}},
        {"Golem", new TypeToken[]{TypeToken.Rock, TypeToken.Ground}},
        {"Golem - Alolan", new TypeToken[]{TypeToken.Rock, TypeToken.Electric}},
        {"Ponyta", new TypeToken[]{TypeToken.Fire}},
        {"Rapidash", new TypeToken[]{TypeToken.Fire}},
        {"Slowpoke", new TypeToken[]{TypeToken.Water, TypeToken.Psychic}},
        {"Slowbro", new TypeToken[]{TypeToken.Water, TypeToken.Psychic}},
        {"Slowbro - Mega", new TypeToken[]{TypeToken.Water, TypeToken.Psychic}},
        {"Magnemite", new TypeToken[]{TypeToken.Electric, TypeToken.Steel}},
        {"Magneton", new TypeToken[]{TypeToken.Electric, TypeToken.Steel}},
        {"Farfetch'd", new TypeToken[]{TypeToken.Normal, TypeToken.Flying}},
        {"Doduo", new TypeToken[]{TypeToken.Normal, TypeToken.Flying}},
        {"Dodrio", new TypeToken[]{TypeToken.Normal, TypeToken.Flying}},
        {"Seel", new TypeToken[]{TypeToken.Water}},
        {"Dewgong", new TypeToken[]{TypeToken.Water, TypeToken.Ice}},
        {"Grimer", new TypeToken[]{TypeToken.Poison}},
        {"Grimer - Alolan", new TypeToken[]{TypeToken.Poison, TypeToken.Dark}},
        {"Muk", new TypeToken[]{TypeToken.Poison}},
        {"Muk - Alolan", new TypeToken[]{TypeToken.Poison, TypeToken.Dark}},
        {"Shellder", new TypeToken[]{TypeToken.Water}},
        {"Cloyster", new TypeToken[]{TypeToken.Water, TypeToken.Ice}},
        {"Gastly", new TypeToken[]{TypeToken.Ghost, TypeToken.Poison}},
        {"Haunter", new TypeToken[]{TypeToken.Ghost, TypeToken.Poison}},
        {"Gengar", new TypeToken[]{TypeToken.Ghost, TypeToken.Poison}},
        {"Gengar - Mega", new TypeToken[]{TypeToken.Ghost, TypeToken.Poison}},
        {"Onix", new TypeToken[]{TypeToken.Rock, TypeToken.Ground}},
        {"Drowzee", new TypeToken[]{TypeToken.Psychic}},
        {"Hypno", new TypeToken[]{TypeToken.Psychic}},
        {"Krabby", new TypeToken[]{TypeToken.Water}},
        {"Kingler", new TypeToken[]{TypeToken.Water}},
        {"Voltorb", new TypeToken[]{TypeToken.Electric}},
        {"Electrode", new TypeToken[]{TypeToken.Electric}},
        {"Exeggcute", new TypeToken[]{TypeToken.Grass, TypeToken.Psychic}},
        {"Exeggutor", new TypeToken[]{TypeToken.Grass, TypeToken.Psychic}},
        {"Exeggutor - Alolan", new TypeToken[]{TypeToken.Grass, TypeToken.Dragon}},
        {"Cubone", new TypeToken[]{TypeToken.Ground}},
        {"Marowak", new TypeToken[]{TypeToken.Ground}},
        {"Marowak - Alolan", new TypeToken[]{TypeToken.Fire, TypeToken.Ghost}},
        {"Hitmonlee", new TypeToken[]{TypeToken.Fighting}},
        {"Hitmonchan", new TypeToken[]{TypeToken.Fighting}},
        {"Lickitung", new TypeToken[]{TypeToken.Normal}},
        {"Koffing", new TypeToken[]{TypeToken.Poison}},
        {"Weezing", new TypeToken[]{TypeToken.Poison}},
        {"Rhyhorn", new TypeToken[]{TypeToken.Ground, TypeToken.Rock}},
        {"Rhydon", new TypeToken[]{TypeToken.Ground, TypeToken.Rock}},
        {"Chansey", new TypeToken[]{TypeToken.Normal}},
        {"Tangela", new TypeToken[]{TypeToken.Grass}},
        {"Kangaskhan", new TypeToken[]{TypeToken.Normal}},
        {"Kangaskhan - Mega", new TypeToken[]{TypeToken.Normal}},
        {"Horsea", new TypeToken[]{TypeToken.Water}},
        {"Seadra", new TypeToken[]{TypeToken.Water}},
        {"Goldeen", new TypeToken[]{TypeToken.Water}},
        {"Seaking", new TypeToken[]{TypeToken.Water}},
        {"Staryu", new TypeToken[]{TypeToken.Water}},
        {"Starmie", new TypeToken[]{TypeToken.Water, TypeToken.Psychic}},
        {"Mr. Mime", new TypeToken[]{TypeToken.Psychic, TypeToken.Fairy}},
        {"Scyther", new TypeToken[]{TypeToken.Bug, TypeToken.Flying}},
        {"Jynx", new TypeToken[]{TypeToken.Ice, TypeToken.Psychic}},
        {"Electabuzz", new TypeToken[]{TypeToken.Electric}},
        {"Magmar", new TypeToken[]{TypeToken.Fire}},
        {"Pinsir", new TypeToken[]{TypeToken.Bug}},
        {"Pinsir - Mega", new TypeToken[]{TypeToken.Bug, TypeToken.Flying}},
        {"Tauros", new TypeToken[]{TypeToken.Normal}},
        {"Magikarp", new TypeToken[]{TypeToken.Water}},
        {"Gyarados", new TypeToken[]{TypeToken.Water, TypeToken.Flying}},
        {"Gyarados - Mega", new TypeToken[]{TypeToken.Water, TypeToken.Dark}},
        {"Lapras", new TypeToken[]{TypeToken.Water, TypeToken.Ice}},
        {"Ditto", new TypeToken[]{TypeToken.Normal}},
        {"Eevee", new TypeToken[]{TypeToken.Normal}},
        {"Vaporeon", new TypeToken[]{TypeToken.Water}},
        {"Jolteon", new TypeToken[]{TypeToken.Electric}},
        {"Flareon", new TypeToken[]{TypeToken.Fire}},
        {"Porygon", new TypeToken[]{TypeToken.Normal}},
        {"Omanyte", new TypeToken[]{TypeToken.Rock, TypeToken.Water}},
        {"Omastar", new TypeToken[]{TypeToken.Rock, TypeToken.Water}},
        {"Kabuto", new TypeToken[]{TypeToken.Rock, TypeToken.Water}},
        {"Kabutops", new TypeToken[]{TypeToken.Rock, TypeToken.Water}},
        {"Aerodactyl", new TypeToken[]{TypeToken.Rock, TypeToken.Flying}},
        {"Aerodactyl - Mega", new TypeToken[]{TypeToken.Rock, TypeToken.Flying}},
        {"Snorlax", new TypeToken[]{TypeToken.Normal}},
        {"Articuno", new TypeToken[]{TypeToken.Ice, TypeToken.Flying}},
        {"Zapdos", new TypeToken[]{TypeToken.Electric, TypeToken.Flying}},
        {"Moltres", new TypeToken[]{TypeToken.Fire, TypeToken.Flying}},
        {"Dratini", new TypeToken[]{TypeToken.Dragon}},
        {"Dragonair", new TypeToken[]{TypeToken.Dragon}},
        {"Dragonite", new TypeToken[]{TypeToken.Dragon, TypeToken.Flying}},
        {"Mewtwo", new TypeToken[]{TypeToken.Psychic}},
        {"Mewtwo - Mega X", new TypeToken[]{TypeToken.Psychic, TypeToken.Fighting}},
        {"Mewtwo - Mega Y", new TypeToken[]{TypeToken.Psychic}},
        {"Mew", new TypeToken[]{TypeToken.Psychic}},
        {"Meltan", new TypeToken[]{TypeToken.Steel}},
        {"Melmetal", new TypeToken[]{TypeToken.Steel}},
    };

    private void OnChange(ChangeEventArgs args)
    {
        string pokemon = (string)args.Value;
        pokemon = pokemon.Trim();
        // The inputted Pokemon name must exactly match the name in the Dictionary.
        // TODO: Allow for inexact matching, i.e. ignore case.
        if (pokedex.ContainsKey(pokemon))
        {
            typeInfo = API.MakeType(pokedex[pokemon]);
            ScoreParty();
        }
    }
    
    private void OnChange1(ChangeEventArgs args)
    {
        string newMon = (string)args.Value;
        newMon = newMon.Trim();
        if (!InputErrorCheck(newMon)) {
            return;
        }
        squad[0].Name = newMon;
        squad[0].Types = pokedex[newMon];
    }
    
    private void OnChange2(ChangeEventArgs args)
    {
        string newMon = (string)args.Value;
        newMon = newMon.Trim();
        if (!InputErrorCheck(newMon)) {
            return;
        }
        squad[1].Name = newMon;
        squad[1].Types = pokedex[newMon];
    }

    private void OnChange3(ChangeEventArgs args)
    {
        string newMon = (string)args.Value;
        newMon = newMon.Trim();
        if (!InputErrorCheck(newMon)) {
            return;
        }
        squad[2].Name = newMon;
        squad[2].Types = pokedex[newMon];
    }
    
    private void OnChange4(ChangeEventArgs args)
    {
        string newMon = (string)args.Value;
        newMon = newMon.Trim();
        if (!InputErrorCheck(newMon)) {
            return;
        }
        squad[3].Name = newMon;
        squad[3].Types = pokedex[newMon];
    }
    
    private void OnChange5(ChangeEventArgs args)
    {
        string newMon = (string)args.Value;
        newMon = newMon.Trim();
        if (!InputErrorCheck(newMon)) {
            return;
        }
        squad[4].Name = newMon;
        squad[4].Types = pokedex[newMon];
    }
    
    private void OnChange6(ChangeEventArgs args)
    {
        string newMon = (string)args.Value;
        newMon = newMon.Trim();
        if (!InputErrorCheck(newMon)) {
            return;
        }
        squad[5].Name = newMon;
        squad[5].Types = pokedex[newMon];
    }
    
    private bool InputErrorCheck(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return false;
        }
        return pokedex.ContainsKey(input);
    }
    
    private void ScoreParty()
    {
        foreach (sPMon p in squad)
            {
                foreach (TypeToken t in p.Types) {
                    foreach (TypeToken ti in typeInfo.Resist2x){
                        if (t == ti){
                            p.Score = p.Score-2;
                        }
                    }
                    foreach (TypeToken ti in typeInfo.Resist4x){
                        if (t == ti){
                            p.Score = p.Score-4;
                        }
                    }
                    foreach (TypeToken ti in typeInfo.Immune){
                        if (t == ti){
                            p.Score = p.Score-8;
                        }
                    }
                    foreach (TypeToken ti in typeInfo.WeakTo2x){
                        if (t == ti){
                            p.Score = p.Score+2;
                        }
                    }
                    foreach (TypeToken ti in typeInfo.WeakTo4x){
                        if (t == ti){
                            p.Score = p.Score+4;
                        }
                    }
                    foreach (TypeToken ti in typeInfo.Normal){
                        if (t == ti){
                            p.Score = p.Score+1;
                        }
                    }      
                }
            }
    }
    
    private string bestCounterMon(){
      int index = 0;
      int highestscore = 0;
      int indhighestscore = 0;
      foreach (sPMon p in squad){
        if(p.Score > highestscore){
          highestscore = p.Score;
          indhighestscore = index;
        }
        index++;
      }
      return squad[indhighestscore].Name;
    }
}
